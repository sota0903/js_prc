

////////////////////////////////////////////////////////////////////////////////
// 引数
////////////////////////////////////////////////////////////////////////////////

// 関数内で定義されている変数 sum の定義は、関数外で定義されている sum を邪魔することはない。
// 関数内ではその関数内で定義された方しか見えていない

var sum = function () {
    var i, sum = 0;
    for (i = 0; i < arguments.length; i++) {
        sum += arguments[i];
    }
    return sum;
};

var testArg = function () {
    console.log(arguments);
};

console.log(sum(10, 20, 30));

testArg(10, 20, 30, 40, 50);

// - JavaScript の設計時のミスにより、arguments は本物の配列ではなく、「配列に似たオブジェクト」である
// - arguments には length プロパティが存在するが、配列で利用できるメソッドはいずれも使うことができない



////////////////////////////////////////////////////////////////////////////////
// 戻り値
// return 文は、本文の終わりが来るよりももっと早いタイミングで関数の実行を終了し、
// 処理を呼び出し元に返す場合に利用する。
// return 文が実行されると、関数はすぐに処理を元の場所に返して、残りの文は実行しない
////////////////////////////////////////////////////////////////////////////////

// - 関数は常に戻り値を返す
// - 戻り値が指定されていない場合は undefined が返るようになっている


////////////////////////////////////////////////////////////////////////////////
// 例外
// 例外とは、通常の処理を阻害するような、一般的ではない（がしかし、完全に予想外ではない）事故的状況が起こった場合のことを指す。
//
// ### throw
// - 関数の実行を中断させる働きを持つ
// - 例外オブジェクトを渡すべき
// - 例外のタイプを特定できるような name プロパティと、状況を説明した message プロパティを含めると良い

////////////////////////////////////////////////////////////////////////////////

var add = function (a, b) {
    if (typeof a !== 'number' || typeof b !== 'number') {
        throw {
            name: 'TypeError',
            message: 'add needs numbers',
            extra: 'Extra!'
        };
    }
    return a + b;
};


// - 例外オブジェクトは try 文中の catch 節に渡される
// - もし例外が try ブロックの中で投げられたのであれば、処理は catch 節に移動する

var try_it = function () {
    try {
        add('seven');
    } catch (e) {
        document.writeln(e.name + ': ' + e.message);
        console.log(e.extra);
    }
}();
